{
	"manifests": {
		"mediamonks/admin-pack": {
			"manifest": {
				"composer-scripts": null,
				"copy-from-recipe": {
					"config/": "%CONFIG_DIR%/",
					"src/": "%SRC_DIR%/",
					"templates/": "templates/"
				},
				"post-install-output": [
					"<bg=blue;fg=white>                     </>",
					"<bg=blue;fg=white> Admin Configuration </>",
					"<bg=blue;fg=white>                     </>",
					"",
					"  * <fg=blue>Configure the admin</> for your application:",
					"    1. Make sure your database is configured correctly",
					"    2. Execute the <comment>php bin/console admin:setup</> command and follow instructions"
				],
				"env": null
			},
			"files": {
				"config/packages/security_admin.yaml.dist": {
					"contents": [
						"security:",
						"    role_hierarchy:",
						"        ROLE_ADMIN: [ROLE_USER, ROLE_SONATA_ADMIN]",
						"        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]",
						"        ROLE_ROOT: [ROLE_SUPER_ADMIN]",
						"",
						"    encoders:",
						"        Symfony\\Component\\Security\\Core\\User\\UserInterface:",
						"            algorithm: bcrypt",
						"",
						"    providers:",
						"        default_user_provider:",
						"            entity:",
						"                class: App:User",
						"                property: username",
						"",
						"    firewalls:",
						"        admin:",
						"            switch_user: true",
						"            pattern: ^/%admin_path%(.*)",
						"            form_login:",
						"                provider: default_user_provider",
						"                login_path: /%admin_path%/login",
						"                use_forward: false",
						"                check_path: /%admin_path%/login",
						"                failure_path: null",
						"                always_use_default_target_path: true",
						"                default_target_path: /%admin_path%/dashboard",
						"                csrf_token_generator: security.csrf.token_manager",
						"            remember_me:",
						"                secret:   '%kernel.secret%'",
						"                lifetime: 604800 # 1 week in seconds",
						"                path: /",
						"            logout:",
						"                path: /%admin_path%/logout",
						"            anonymous: ~",
						"",
						"    access_control:",
						"        - { path: ^/%admin_path%/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }",
						"        - { path: ^/%admin_path%/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }",
						"        - { path: ^/%admin_path%/(.*), role: ROLE_ADMIN }"
					],
					"executable": false
				},
				"config/packages/sonata_admin.yaml": {
					"contents": [
						"sonata_admin:",
						"    title: 'MediaMonks'",
						"    security:",
						"        handler: sonata.admin.security.handler.role",
						"    templates:",
						"        user_block: 'admin/user_block.html.twig'",
						"    dashboard:",
						"        groups:",
						"            admin.group.global:",
						"                label: Global",
						"                items:",
						"                    - admin.user",
						"                roles: [ ROLE_ROOT ]",
						"",
						"services:",
						"    admin.user:",
						"        class: App\\Admin\\UserAdmin",
						"        tags:",
						"            - { name: sonata.admin, manager_type: orm, group: Global, label: Users}",
						"        arguments: [ ~, App\\Entity\\User, ~]",
						""
					],
					"executable": false
				},
				"config/packages/sonata_block.yaml": {
					"contents": [
						"sonata_block:",
						"    default_contexts: [cms]",
						"    blocks:",
						"        sonata.admin.block.admin_list:",
						"            contexts: [admin]",
						"        sonata.user.block.menu:",
						"        sonata.user.block.account:",
						""
					],
					"executable": false
				},
				"config/routes/admin.yaml": {
					"contents": [
						"_sonata_admin:",
						"    resource: '@SonataAdminBundle/Resources/config/routing/sonata_admin.xml'",
						"    prefix: /%admin_path%",
						"    options:",
						"        expose: true",
						"",
						"_sonata_admin_resource:",
						"    resource: .",
						"    type: sonata_admin",
						"    prefix: /%admin_path%",
						"    options:",
						"        expose: true",
						"",
						"admin_login:",
						"    path: /%admin_path%/login",
						"    controller: App\\Controller\\Admin\\SecurityController::loginAction",
						"",
						"admin_logout:",
						"    path: /%admin_path%/logout",
						"    controller: App\\Controller\\Admin\\SecurityController::logoutAction",
						""
					],
					"executable": false
				},
				"src/Admin/UserAdmin.php": {
					"contents": [
						"<?php",
						"",
						"namespace App\\Admin;",
						"",
						"use Sonata\\AdminBundle\\Admin\\AbstractAdmin;",
						"use Sonata\\AdminBundle\\Datagrid\\ListMapper;",
						"use Sonata\\AdminBundle\\Form\\FormMapper;",
						"use Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;",
						"use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;",
						"use Symfony\\Component\\Security\\Core\\Tests\\Encoder\\PasswordEncoder;",
						"use Symfony\\Component\\Validator\\Constraints\\NotBlank;",
						"",
						"class UserAdmin extends AbstractAdmin",
						"{",
						"    /**",
						"     * {@inheritdoc}",
						"     */",
						"    public function getExportFields()",
						"    {",
						"        // avoid security field to be exported",
						"        return array_filter(",
						"            parent::getExportFields(),",
						"            function ($v) {",
						"                return !in_array($v, ['password', 'salt']);",
						"            }",
						"        );",
						"    }",
						"",
						"    /**",
						"     * {@inheritdoc}",
						"     */",
						"    protected function configureListFields(ListMapper $listMapper)",
						"    {",
						"        $listMapper",
						"            ->addIdentifier('username')",
						"            ->add('createdAt')",
						"        ;",
						"",
						"        $securityChecker = $this->getConfigurationPool()->getContainer()->get('security.authorization_checker');",
						"",
						"        if ($securityChecker->isGranted('ROLE_ALLOWED_TO_SWITCH')) {",
						"            $listMapper",
						"                ->add(",
						"                    'impersonating',",
						"                    'string',",
						"                    ['template' => 'admin/security/impersonating.html.twig']",
						"                );",
						"        }",
						"",
						"        $listMapper->add(",
						"            '_action',",
						"            'actions',",
						"            [",
						"                'actions'  => [",
						"                    'edit'   => ['template' => '@SonataAdmin/CRUD/list__action_edit.html.twig'],",
						"                    'delete' => ['template' => '@SonataAdmin/CRUD/list__action_delete.html.twig']",
						"                ],",
						"                'template' => '@SonataAdmin/CRUD/list__action.html.twig'",
						"            ]",
						"        );",
						"    }",
						"",
						"    /**",
						"     * {@inheritdoc}",
						"     */",
						"    protected function configureFormFields(FormMapper $formMapper)",
						"    {",
						"        $securityChecker = $this->getConfigurationPool()->getContainer()->get('security.authorization_checker');",
						"        $roles = $this->getConfigurationPool()->getContainer()->getParameter('security.role_hierarchy.roles');",
						"",
						"        $passwordFieldOptions = ['required' => (!$this->getSubject() || is_null($this->getSubject()->getId()))];",
						"        if ((!$this->getSubject() || is_null($this->getSubject()->getId()))) {",
						"            $passwordFieldOptions['constraints'] = new NotBlank();",
						"        }",
						"",
						"        $formMapper",
						"            ->with('General')",
						"            ->add('username')",
						"            ->add(",
						"                'plainPassword',",
						"                TextType::class,",
						"                $passwordFieldOptions",
						"            )",
						"            ->end();",
						"",
						"        if ($securityChecker->isGranted('ROLE_ADMIN')) {",
						"            $formMapper",
						"                ->with('Roles')",
						"                ->add(",
						"                    'roles',",
						"                    ChoiceType::class,",
						"                    [",
						"                        'label' => false,",
						"                        'expanded' => true,",
						"                        'multiple' => true,",
						"                        'required' => false,",
						"                        'choices' => array_combine(array_keys($roles), array_keys($roles))",
						"                    ]",
						"                )",
						"                ->end();",
						"        }",
						"    }",
						"",
						"    /**",
						"     * {@inheritdoc}",
						"     */",
						"    public function preUpdate($user)",
						"    {",
						"        $this->updatePassword();",
						"    }",
						"",
						"    /**",
						"     * {@inheritdoc}",
						"     */",
						"    public function prePersist($user)",
						"    {",
						"        $this->updatePassword();",
						"    }",
						"",
						"    private function updatePassword()",
						"    {",
						"        /** @var PasswordEncoder $passwordEncoder */",
						"        $passwordEncoder = $this->getConfigurationPool()->getContainer()->get('security.password_encoder');",
						"",
						"        if ($this->getSubject()->getPlainPassword()) {",
						"            $this->getSubject()->updatePassword($passwordEncoder->encodePassword($this->getSubject(), $this->getSubject()->getPlainPassword()));",
						"        }",
						"    }",
						"}",
						""
					],
					"executable": false
				},
				"src/Command/AdminConfigureCommand.php": {
					"contents": [
						"<?php",
						"",
						"namespace App\\Command;",
						"",
						"use App\\Entity\\User;",
						"use Doctrine\\DBAL\\Connection;",
						"use Doctrine\\ORM\\EntityManagerInterface;",
						"use Symfony\\Component\\Console\\Command\\Command;",
						"use Symfony\\Component\\Console\\Helper\\Table;",
						"use Symfony\\Component\\Console\\Input\\ArrayInput;",
						"use Symfony\\Component\\Console\\Input\\InputInterface;",
						"use Symfony\\Component\\Console\\Input\\InputOption;",
						"use Symfony\\Component\\Console\\Output\\OutputInterface;",
						"use Symfony\\Component\\Console\\Question\\ConfirmationQuestion;",
						"use Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder;",
						"use Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;",
						"use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
						"use Symfony\\Component\\Yaml\\Yaml;",
						"",
						"final class AdminConfigureCommand extends Command",
						"{",
						"    const NAME = 'admin:configure';",
						"",
						"    const OPTION_FORCE_USER_CREATION = 'force-user-creation';",
						"",
						"    const CHAR_LIST_URL_SAFE = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
						"",
						"    const CHAR_LIST_PASSWORD = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-_=+~';",
						"",
						"    const LENGTH_SECRET = 40;",
						"",
						"    const LENGTH_ADMIN_DIRECTORY = 16;",
						"",
						"    const BCRYPT_COST = 13;",
						"",
						"    /**",
						"     * @var EntityManagerInterface",
						"     */",
						"    private $entityManager;",
						"",
						"    /**",
						"     * @var InputInterface",
						"     */",
						"    private $input;",
						"",
						"    /**",
						"     * @var OutputInterface",
						"     */",
						"    private $output;",
						"",
						"    /**",
						"     * @var array",
						"     */",
						"    private $users = [];",
						"",
						"    /**",
						"     * @var bool",
						"     */",
						"    private $clearCache = false;",
						"",
						"    /**",
						"     * @param EntityManagerInterface $entityManager",
						"     */",
						"    public function __construct(EntityManagerInterface $entityManager)",
						"    {",
						"        $this->entityManager = $entityManager;",
						"",
						"        parent::__construct();",
						"    }",
						"",
						"    /**",
						"     *",
						"     */",
						"    protected function configure()",
						"    {",
						"        $this",
						"            ->setName('admin:setup')",
						"            ->setDescription('Setup Sonata Admin for first use')",
						"            ->addOption(",
						"                'force-user-creation',",
						"                null,",
						"                InputOption::VALUE_NONE,",
						"                'Force users to be generated (will delete all users!)'",
						"            );",
						"    }",
						"",
						"    /**",
						"     * @param InputInterface $input",
						"     * @param OutputInterface $output",
						"     *",
						"     * @return void",
						"     */",
						"    protected function execute(InputInterface $input, OutputInterface $output)",
						"    {",
						"        $this->input = $input;",
						"        $this->output = $output;",
						"",
						"        $this->assertDatabase();",
						"        $this->assertSchema();",
						"        $this->generateAdminPath();",
						"        $this->updateSecurityConfiguration();",
						"        $this->truncateUsers();",
						"        $this->createAdminUser('root', ['ROLE_ROOT']);",
						"        $this->createAdminUser('superAdmin', ['ROLE_SUPER_ADMIN']);",
						"        $this->createAdminUser('admin', ['ROLE_ADMIN']);",
						"",
						"        if ($this->clearCache) {",
						"            $this->cacheClear();",
						"        }",
						"",
						"        $this->finish();",
						"    }",
						"",
						"    /**",
						"     * Make sure we have a clean cache",
						"     */",
						"    private function cacheClear()",
						"    {",
						"        $this->output->writeln(",
						"            'A cache flush is required for changes to take effect.'",
						"        );",
						"        $command = $this->getApplication()->find('cache:clear');",
						"        $command->run(new ArrayInput([]), $this->output);",
						"    }",
						"",
						"    /**",
						"     * Output relevant information to the user",
						"     */",
						"    protected function finish()",
						"    {",
						"        if (count($this->users) > 0) {",
						"            $this->output->writeln([",
						"                '',",
						"                '<comment>Store these generated users in a safe place (a private Assembla page for instance). These credentials will be outputted only once!</comment>',",
						"                '',",
						"            ]);",
						"            $table = new Table($this->output);",
						"            $table->setHeaders(['Username', 'Password', 'Roles'])->setRows($this->users);",
						"            $table->render();",
						"",
						"            $this->output->writeln(['', '']);",
						"        }",
						"        else {",
						"            $this->output->writeln([",
						"                '',",
						"                '<info>No new users were generated.</info>',",
						"                '',",
						"            ]);",
						"        }",
						"",
						"        $this->output->writeln([sprintf('<info>Admin is setup successfully at path \"/%s\"!</info>', $this->getAdminPath()), '']);",
						"",
						"    }",
						"",
						"    /**",
						"     * Make sure we have proper database connectivity",
						"     */",
						"    private function assertDatabase()",
						"    {",
						"        try {",
						"            $this->getDatabaseConnection()->fetchAssoc('SHOW TABLES');",
						"        } catch (\\Exception $e) {",
						"            $this->output->writeLn(",
						"                '<error>Database is not configured yet, please do this first and then run this script again.</error>'",
						"            );",
						"",
						"            exit;",
						"        }",
						"    }",
						"",
						"    /**",
						"     * Make sure the schema was generated so we can store users",
						"     */",
						"    private function assertSchema()",
						"    {",
						"        try {",
						"            $this->getDatabaseConnection()->fetchAssoc('SELECT * FROM users');",
						"        } catch (\\Exception $e) {",
						"            $this->output->write(",
						"                '<info>Schema was not created yet, doing it now.</info>'",
						"            );",
						"",
						"            $command = $this->getApplication()->find('doctrine:schema:update');",
						"            $returnCode = $command->run(",
						"                new ArrayInput(['--force' => true]),",
						"                $this->output",
						"            );",
						"            if ($returnCode !== 0) {",
						"                $this->output->writeLn(",
						"                    '<error>Schema could not be generated, please fix errors that can be seen above.</error>'",
						"                );",
						"                exit;",
						"            }",
						"        }",
						"    }",
						"",
						"    /**",
						"     * Implement security configuration",
						"     */",
						"    private function updateSecurityConfiguration()",
						"    {",
						"        $security = $this->getConfigPath().'packages/security.yaml';",
						"        $securityAdmin = $this->getConfigPath().'packages/security_admin.yaml.dist';",
						"        if (!file_exists($securityAdmin)) {",
						"            return;",
						"        }",
						"",
						"        $this->output->writeln(",
						"            [",
						"                '<info>The admin needs to have security rules setup in order to function.</info>',",
						"                '<info>Since Flex does not allow security to be changed these settings will collide with the existing settings.</info>',",
						"                '<info>If you have not yet configured security yourself you can safely let this script override</info>',",
						"                '<info>the settings needed for the admin otherwise you will need to manually get the settings</info>',",
						"                '',",
						"            ]",
						"        );",
						"",
						"        $helper = $this->getHelper('question');",
						"        $question = new ConfirmationQuestion(",
						"            '<question>Do you want to override security settings automatically?</question>', true",
						"        );",
						"        if (!$helper->ask($this->input, $this->output, $question)) {",
						"            $this->output->writeLn(",
						"                '<comment>Please look at the securty_admin.yaml.dist for manual setup, then, run this script again.</comment>'",
						"            );",
						"            exit;",
						"        }",
						"",
						"        // replace security configs",
						"        unlink($security);",
						"        rename($securityAdmin, $security);",
						"",
						"        $this->clearCache = true;",
						"    }",
						"",
						"    private function truncateUsers()",
						"    {",
						"        if (!$this->input->getOption(self::OPTION_FORCE_USER_CREATION)) {",
						"            return;",
						"        }",
						"",
						"        $helper = $this->getHelper('question');",
						"        $question = new ConfirmationQuestion(",
						"            '<question>This will delete all users from your database, do you want to continue?</question>', true",
						"        );",
						"        if ($helper->ask($this->input, $this->output, $question)) {",
						"            $this->getDatabaseConnection()->exec('TRUNCATE TABLE users');",
						"            $message = 'Users were deleted';",
						"        }",
						"        else {",
						"            $message = 'Users were not deleted';",
						"        }",
						"",
						"        $this->output->writeln(",
						"            [",
						"                sprintf('<info>%s</info>', $message),",
						"                '',",
						"            ]",
						"        );",
						"    }",
						"",
						"    /**",
						"     * Generate a new admin user",
						"     *",
						"     * @param string $username",
						"     * @param array $roles",
						"     */",
						"    private function createAdminUser($username, array $roles)",
						"    {",
						"        // do not generate users with the same role if they already exist",
						"        $user = $this->getDatabaseConnection()->fetchAssoc(",
						"            'SELECT id FROM users WHERE username LIKE ?',",
						"            [$username.'%']",
						"        );",
						"        if (!empty($user)) {",
						"            return;",
						"        }",
						"",
						"        $password = self::generateRandomString(20, self::CHAR_LIST_PASSWORD);",
						"        $username = $username.self::generateRandomString(",
						"                10,",
						"                self::CHAR_LIST_URL_SAFE",
						"            );",
						"",
						"",
						"        $user = new User;",
						"        $user->setUsername($username);",
						"",
						"        $user->setPassword($this->getPasswordEncoder()->encodePassword($password, null));",
						"        $user->setRoles($roles);",
						"",
						"        $this->entityManager->persist($user);",
						"        $this->entityManager->flush();",
						"",
						"        $this->users[] = [",
						"            'username' => $username,",
						"            'password' => $password,",
						"            'roles' => implode(',', $roles)",
						"        ];",
						"    }",
						"",
						"    /**",
						"     * @return BCryptPasswordEncoder",
						"     */",
						"    private function getPasswordEncoder()",
						"    {",
						"        $data = Yaml::parseFile($this->getSecurityYamlPath());",
						"        if (!isset($data['security']['encoders'][UserInterface::class]['algorithm'])) {",
						"            $this->output->writeln('<error>Security file was not updated correctly.</error>');",
						"            exit;",
						"        }",
						"        $encoder = $data['security']['encoders'][UserInterface::class]['algorithm'];",
						"        if ($encoder !== 'bcrypt') {",
						"            $this->output->writeln('<error>This script only works with bcrypt for now.</error>');",
						"            exit;",
						"        }",
						"",
						"        return new BCryptPasswordEncoder(self::BCRYPT_COST);",
						"    }",
						"",
						"    /**",
						"     * Generate a random admin path",
						"     */",
						"    private function generateAdminPath()",
						"    {",
						"        $file = $this->getServicesYamlPath();",
						"",
						"        $contents = file_get_contents($file);",
						"        $search = \"admin_path: 'admin'\";",
						"        if (stripos($contents, $search) === false) {",
						"            return;",
						"        }",
						"",
						"        file_put_contents(",
						"            $file,",
						"            str_replace(",
						"                $search,",
						"                sprintf(",
						"                    \"admin_path: 'admin_%s'\",",
						"                    $this->generateRandomString(",
						"                        self::LENGTH_ADMIN_DIRECTORY,",
						"                        self::CHAR_LIST_URL_SAFE",
						"                    )",
						"                ),",
						"                $contents",
						"            )",
						"        );",
						"",
						"        $this->clearCache = true;",
						"    }",
						"",
						"    /**",
						"     * @return string",
						"     */",
						"    private function getAdminPath()",
						"    {",
						"        $data = Yaml::parseFile($this->getServicesYamlPath());",
						"        return $data['parameters']['admin_path'];",
						"    }",
						"",
						"    /**",
						"     * @return string",
						"     */",
						"    private function getServicesYamlPath()",
						"    {",
						"        return $this->getConfigPath().'services.yaml';",
						"    }",
						"",
						"    /**",
						"     * @return string",
						"     */",
						"    private function getSecurityYamlPath()",
						"    {",
						"        return $this->getConfigPath().'packages/security.yaml';",
						"    }",
						"",
						"    /**",
						"     * @return Connection",
						"     */",
						"    private function getDatabaseConnection()",
						"    {",
						"        return $this->entityManager->getConnection();",
						"    }",
						"",
						"    /**",
						"     * @param int $length",
						"     * @param $characters",
						"     *",
						"     * @return string",
						"     */",
						"    private function generateRandomString($length = 10, $characters)",
						"    {",
						"        $charactersLength = strlen($characters);",
						"        $randomString = '';",
						"        for ($i = 0; $i < $length; $i++) {",
						"            $randomString .= $characters[random_int(0, $charactersLength - 1)];",
						"        }",
						"",
						"        return $randomString;",
						"    }",
						"",
						"    /**",
						"     * @return string",
						"     */",
						"    private function getConfigPath()",
						"    {",
						"        return __DIR__.'/../../config/';",
						"    }",
						"}",
						""
					],
					"executable": false
				},
				"src/Controller/Admin/SecurityController.php": {
					"contents": [
						"<?php",
						"",
						"namespace App\\Controller\\Admin;",
						"",
						"use Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;",
						"use Symfony\\Component\\HttpFoundation\\Response;",
						"use Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;",
						"",
						"class SecurityController extends Controller",
						"{",
						"    /**",
						"     * @param AuthenticationUtils $authUtils",
						"     * @return Response",
						"     */",
						"    public function loginAction(AuthenticationUtils $authUtils)",
						"    {",
						"        return $this->render('admin/security/login.html.twig', [",
						"            'last_username' => $authUtils->getLastUsername(),",
						"            'error' => $authUtils->getLastAuthenticationError()",
						"        ]);",
						"    }",
						"",
						"    /**",
						"     */",
						"    public function logoutAction()",
						"    {",
						"    }",
						"}",
						""
					],
					"executable": false
				},
				"src/Controller/Front/.gitignore": {
					"contents": [
						""
					],
					"executable": false
				},
				"src/Entity/User.php": {
					"contents": [
						"<?php",
						"",
						"namespace App\\Entity;",
						"",
						"use Doctrine\\ORM\\Mapping as ORM;",
						"use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
						"",
						"/**",
						" * @ORM\\Entity(repositoryClass=\"App\\Repository\\UserRepository\")",
						" * @ORM\\Table(name=\"users\")",
						" */",
						"class User implements UserInterface, \\Serializable",
						"{",
						"    /**",
						"     * @ORM\\Id",
						"     * @ORM\\Column(type=\"integer\")",
						"     * @ORM\\GeneratedValue(strategy=\"AUTO\")",
						"     */",
						"    protected $id;",
						"",
						"    /**",
						"     * @ORM\\Column(type=\"string\", nullable=true, unique=true, length=180)",
						"     */",
						"    protected $username;",
						"",
						"    /**",
						"     * @ORM\\Column(type=\"string\", nullable=true)",
						"     */",
						"    protected $password;",
						"",
						"    /**",
						"     * @var string",
						"     */",
						"    protected $plainPassword;",
						"",
						"    /**",
						"     * @ORM\\Column(type=\"datetime\", nullable=true)",
						"     */",
						"    protected $lastLogin;",
						"",
						"    /**",
						"     * @ORM\\Column(type=\"string\", nullable=true)",
						"     */",
						"    protected $tokenVerifier;",
						"",
						"    /**",
						"     * @ORM\\Column(type=\"json_array\", nullable=true)",
						"     */",
						"    protected $roles;",
						"",
						"    public function __construct()",
						"    {",
						"        $this->updateTokenVerifier();",
						"    }",
						"",
						"    public function __toString()",
						"    {",
						"        return (string)$this->getUsername();",
						"    }",
						"",
						"    /**",
						"     * @return integer",
						"     */",
						"    public function getId()",
						"    {",
						"        return $this->id;",
						"    }",
						"",
						"    /**",
						"     * @return string",
						"     */",
						"    public function getUsername()",
						"    {",
						"        return $this->username;",
						"    }",
						"",
						"    /**",
						"     * @param string $username",
						"     * @return User",
						"     */",
						"    public function setUsername($username)",
						"    {",
						"        $this->username = $username;",
						"",
						"        return $this;",
						"    }",
						"",
						"    /**",
						"     * @return string",
						"     */",
						"    public function getLastLogin()",
						"    {",
						"        return $this->lastLogin;",
						"    }",
						"",
						"    /**",
						"     * @param mixed $lastLogin",
						"     * @return User",
						"     */",
						"    public function setLastLogin($lastLogin)",
						"    {",
						"        $this->lastLogin = $lastLogin;",
						"",
						"        return $this;",
						"    }",
						"",
						"    /**",
						"     * @return mixed",
						"     */",
						"    public function getTokenVerifier()",
						"    {",
						"        return $this->tokenVerifier;",
						"    }",
						"",
						"    /**",
						"     * @param mixed $tokenVerifier",
						"     */",
						"    public function setTokenVerifier($tokenVerifier)",
						"    {",
						"        $this->tokenVerifier = $tokenVerifier;",
						"    }",
						"",
						"    /** @see \\Serializable::serialize() */",
						"    public function serialize()",
						"    {",
						"        return serialize(",
						"            [",
						"                $this->id,",
						"                $this->username,",
						"                $this->password,",
						"                // see section on salt below",
						"                // $this->salt,",
						"            ]",
						"        );",
						"    }",
						"",
						"    /** @see \\Serializable::unserialize() */",
						"    public function unserialize($serialized)",
						"    {",
						"        list (",
						"            $this->id,",
						"            $this->username,",
						"            $this->password,",
						"            // see section on salt below",
						"            // $this->salt",
						"            ) = unserialize($serialized);",
						"    }",
						"",
						"    public function getRoles()",
						"    {",
						"        return $this->roles;",
						"    }",
						"",
						"    public function setRoles($roles)",
						"    {",
						"        $this->roles = $roles;",
						"    }",
						"",
						"    public function getPassword()",
						"    {",
						"        return $this->password;",
						"    }",
						"",
						"    public function hasRole($role)",
						"    {",
						"        return in_array($role, $this->roles);",
						"    }",
						"",
						"    public function getSalt()",
						"    {",
						"        return null;",
						"    }",
						"",
						"    public function eraseCredentials()",
						"    {",
						"        $this->plainPassword = null;",
						"    }",
						"",
						"    public function updateTokenVerifier()",
						"    {",
						"        $this->tokenVerifier = time();",
						"    }",
						"",
						"    /**",
						"     * @param mixed $password",
						"     */",
						"    public function setPassword($password)",
						"    {",
						"        $this->password = $password;",
						"    }",
						"",
						"    /**",
						"     * @return string",
						"     */",
						"    public function getPlainPassword()",
						"    {",
						"        return $this->plainPassword;",
						"    }",
						"",
						"    /**",
						"     * @param string $plainPassword",
						"     */",
						"    public function setPlainPassword($plainPassword)",
						"    {",
						"        $this->plainPassword = $plainPassword;",
						"    }",
						"}",
						""
					],
					"executable": false
				},
				"src/Repository/UserRepository.php": {
					"contents": [
						"<?php",
						"",
						"namespace App\\Repository;",
						"",
						"use Doctrine\\ORM\\EntityRepository;",
						"",
						"class UserRepository extends EntityRepository",
						"{",
						"}",
						""
					],
					"executable": false
				},
				"templates/admin/security/impersonating.html.twig": {
					"contents": [
						"{% extends '@SonataAdmin/CRUD/base_list_field.html.twig' %}",
						"",
						"{% block field %}",
						"    {% if is_granted('ROLE_ALLOWED_TO_SWITCH') %}",
						"        <a href=\"{{ path('sonata_admin_dashboard', {'_switch_user': object.username}) }}\" class=\"btn btn-default\">",
						"            <i class=\"fa fa-user\"></i> <i class=\"fa fa-sign-in\"></i>",
						"        </a>",
						"    {% endif %}",
						"{% endblock %}"
					],
					"executable": false
				},
				"templates/admin/security/login.html.twig": {
					"contents": [
						"{% extends '@SonataAdmin/standard_layout.html.twig' %}",
						"",
						"{% block sonata_header %}{% endblock %}",
						"{% block sonata_left_side %}{% endblock %}",
						"{% block sonata_nav %}{% endblock %}",
						"{% block sonata_breadcrumb %}{% endblock %}",
						"",
						"{% block stylesheets %}",
						"    {{ parent() }}",
						"",
						"    <style>",
						"        .content {",
						"            margin: 0px;",
						"            padding: 0px;",
						"        }",
						"",
						"        body {",
						"            background: #dedede;",
						"            background-size: cover !important;",
						"        }",
						"",
						"        .wrapper {",
						"            background-color: transparent !important;",
						"        }",
						"",
						"        .login-box-custom {",
						"            padding: 20px 50px 50px 50px;",
						"            border-radius: 4px;",
						"            background-color: white;",
						"            margin-top: 100px;",
						"        }",
						"    </style>",
						"{% endblock %}",
						"",
						"{% block sonata_head_title %}Secured Area{% endblock %}",
						"",
						"{% block sonata_wrapper %}",
						"    {% block sonata_page_content %}",
						"        <div class=\"row\">",
						"            <div class=\"col-md-4\"></div>",
						"            <div class=\"col-md-4 login-box-custom\">",
						"                <h1><i class=\"fa fa-lock\"></i> Secured Area</h1>",
						"",
						"                {% if error %}",
						"                    <div class=\"alert alert-danger\"",
						"                         role=\"alert\">{{ error.messageKey|trans(error.messageData, 'security') }}</div>",
						"                {% endif %}",
						"",
						"                <form action=\"{{ path('admin_login') }}\" method=\"post\">",
						"",
						"                    <input type=\"hidden\" name=\"_csrf_token\" value=\"{{ csrf_token('authenticate') }}\">",
						"",
						"                    <div class=\"form-group\">",
						"                        <label for=\"username\">Username</label>",
						"                        <input class=\"form-control\" id=\"username\" name=\"_username\" placeholder=\"Username\">",
						"                    </div>",
						"                    <div class=\"form-group\">",
						"                        <label for=\"password\">Password</label>",
						"                        <input type=\"password\" class=\"form-control\" id=\"password\" name=\"_password\"",
						"                               placeholder=\"Password\">",
						"                    </div>",
						"",
						"                    <div class=\"checkbox\">",
						"                        <label>",
						"                            <input type=\"checkbox\" id=\"remember_me\" name=\"_remember_me\"/> Keep me logged in",
						"                        </label>",
						"                    </div>",
						"",
						"                    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-fw fa-sign-in\"></i> Login</button>",
						"                </form>",
						"            </div>",
						"            <div class=\"col-md-4\"></div>",
						"        </div>",
						"    {% endblock %}",
						"{% endblock %}"
					],
					"executable": false
				},
				"templates/admin/user_block.html.twig": {
					"contents": [
						"{% block user_block %}",
						"    {% if app.user %}",
						"        <li class=\"user-header bg-light-blue\">",
						"            <i class=\"fa fa-user\" style=\"font-size: 40px; margin-top: 25px;\"></i>",
						"            <p>{{ app.user.username }}</p>",
						"        </li>",
						"",
						"        <li class=\"user-footer\">",
						"            <div class=\"pull-right\">",
						"                {% if is_granted('ROLE_PREVIOUS_ADMIN') %}",
						"                    <a href=\"{{ path('sonata_admin_dashboard', {'_switch_user': '_exit'}) }}\" class=\"btn btn-default btn-flat\">",
						"                        <i class=\"fa fa-sign-out fa-fw\"></i> Exit impersonation",
						"                    </a>",
						"                {% else %}",
						"                    <a href=\"{{ path('admin_logout') }}\" class=\"btn btn-default btn-flat\">",
						"                        <i class=\"fa fa-sign-out fa-fw\"></i> Logout",
						"                    </a>",
						"                {% endif %}",
						"            </div>",
						"        </li>",
						"    {% endif %}",
						"{% endblock %}"
					],
					"executable": false
				}
			},
			"ref": "df4535d97e864c159def600911f7a61e428c4226"
		}
	}
}
